"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[853],{9613:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>m});var o=t(9496);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,o,i=function(n,e){if(null==n)return{};var t,o,i={},s=Object.keys(n);for(o=0;o<s.length;o++)t=s[o],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(o=0;o<s.length;o++)t=s[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=o.createContext({}),l=function(n){var e=o.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},p=function(n){var e=l(n.components);return o.createElement(c.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},f=o.forwardRef((function(n,e){var t=n.components,i=n.mdxType,s=n.originalType,c=n.parentName,p=a(n,["components","mdxType","originalType","parentName"]),d=l(t),f=i,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||s;return t?o.createElement(m,r(r({ref:e},p),{},{components:t})):o.createElement(m,r({ref:e},p))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var s=t.length,r=new Array(s);r[0]=f;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=n,a[d]="string"==typeof n?n:i,r[1]=a;for(var l=2;l<s;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5902:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(8957),i=(t(9496),t(9613));const s={sidebar_position:1},r="\u5165\u53e3\u5904\u7406",a={unversionedId:"basic/entry",id:"basic/entry",title:"\u5165\u53e3\u5904\u7406",description:"CLI\u4f7f\u7528cac\u505a\u547d\u4ee4\u884c\u4ea4\u4e92\uff0c\u6839\u636e files \u548c flags\uff08CLI\u6253\u6807\u9009\u9879\uff09\u83b7\u53d6\u6700\u7ec8\u7684options\u3002",source:"@site/docs/basic/entry.md",sourceDirName:"basic",slug:"/basic/entry",permalink:"/encode-bundle/docs/basic/entry",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u5feb\u901f\u4e0a\u624b",permalink:"/encode-bundle/docs/intro"},next:{title:"external",permalink:"/encode-bundle/docs/basic/external"}},c={},l=[],p={toc:l},d="wrapper";function u(n){let{components:e,...t}=n;return(0,i.kt)(d,(0,o.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u5165\u53e3\u5904\u7406"},"\u5165\u53e3\u5904\u7406"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CLI"),"\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"cac"),"\u505a\u547d\u4ee4\u884c\u4ea4\u4e92\uff0c\u6839\u636e files \u548c flags\uff08",(0,i.kt)("inlineCode",{parentName:"p"},"CLI"),"\u6253\u6807\u9009\u9879\uff09\u83b7\u53d6\u6700\u7ec8\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"options"),"\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},".action(async (files: string[], flags) => {\n  const { build } = await import('.')\n  Object.assign(options, {\n    ...flags,\n  })\n  if (!options.entry && files.length > 0) {\n    options.entry = files.map(slash)\n  }\n  // ...\n  await build(options) // \u8fdb\u884cbundle\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export async function build(_options: Options) {\n  const config =\n    _options.config === false\n      ? {}\n      : await loadEncodeBuildConfig(\n          process.cwd(),\n          _options.config === true ? undefined : _options.config,\n        );\n\n  const configData = typeof config.data === 'function' ? await config.data(_options) : config.data;\n\n  await Promise.all(\n    [...(Array.isArray(configData) ? configData : [configData])].map(async (item) => {\n      const logger = createLogger(item?.name);\n      const options = await normalizeOptions(logger, item, _options);\n\n      const dtsTask = async () => {\n        if (options.dts) {\n          await new Promise<void>((resolve, reject) => {\n            const worker = new Worker(path.join(__dirname, './rollup.js'));\n            worker.postMessage({\n              configName: item?.name,\n              options: {\n                ...options, // functions cannot be cloned\n                banner: undefined,\n                footer: undefined,\n                esbuildPlugins: undefined,\n                esbuildOptions: undefined,\n                plugins: undefined,\n                treeshake: undefined,\n                onSuccess: undefined,\n                outExtension: undefined,\n              },\n            });\n            worker.on('message', (data) => {\n              if (data === 'error') {\n                reject(new Error('error occured in dts build'));\n              } else if (data === 'success') {\n                resolve();\n              } else {\n                const { type, text } = data;\n                if (type === 'log') {\n                  console.log(text);\n                } else if (type === 'error') {\n                  console.error(text);\n                }\n              }\n            });\n          });\n        }\n      };\n\n      const mainTasks = async () => {\n        if (!options.dts?.only) {\n          let onSuccessProcess: ChildProcess | undefined;\n          let onSuccessCleanup: (() => any) | undefined | void;\n          /** Files imported by the entry */\n          const buildDependencies: Set<string> = new Set();\n\n          let depsHash = await getAllDepsHash(process.cwd());\n\n          const doOnSuccessCleanup = async () => {\n            if (onSuccessProcess) {\n              await killProcess({\n                pid: onSuccessProcess.pid,\n                signal: options.killSignal || 'SIGTERM',\n              });\n            } else if (onSuccessCleanup) {\n              await onSuccessCleanup();\n            }\n            // reset them in all occasions anyway\n            onSuccessProcess = undefined;\n            onSuccessCleanup = undefined;\n          };\n\n          const buildAll = async () => {\n            await doOnSuccessCleanup();\n            // Store previous build dependencies in case the build failed\n            // So we can restore it\n            const previousBuildDependencies = new Set(buildDependencies);\n            buildDependencies.clear();\n\n            if (options.clean) {\n              const extraPatterns = Array.isArray(options.clean) ? options.clean : [];\n              // .d.ts files are removed in the `dtsTask` instead\n              // `dtsTask` is a separate process, which might start before `mainTasks`\n              if (options.dts) {\n                extraPatterns.unshift('!**/*.d.{ts,cts,mts}');\n              }\n              await removeFiles(['**/*', ...extraPatterns], options.outDir);\n              logger.info('CLI', 'Cleaning output folder');\n            }\n\n            const css: Map<string, string> = new Map();\n            await Promise.all([\n              ...options.format.map(async (format, index) => {\n                const pluginContainer = new PluginContainer([\n                  shebang(),\n                  ...(options.plugins || []),\n                  treeShakingPlugin({\n                    treeshake: options.treeshake,\n                    name: options.globalName,\n                    silent: options.silent,\n                  }),\n                  cjsSplitting(),\n                  cjsInterop(),\n                  es5(),\n                  sizeReporter(),\n                  terserPlugin({\n                    minifyOptions: options.minify,\n                    format,\n                    terserOptions: options.terserOptions,\n                    globalName: options.globalName,\n                    logger,\n                  }),\n                ]);\n                await runEsbuild(options, {\n                  pluginContainer,\n                  format,\n                  css: index === 0 || options.injectStyle ? css : undefined,\n                  logger,\n                  buildDependencies,\n                }).catch((error) => {\n                  previousBuildDependencies.forEach((v) => buildDependencies.add(v));\n                  throw error;\n                });\n              }),\n            ]);\n\n            if (options.onSuccess) {\n              if (typeof options.onSuccess === 'function') {\n                onSuccessCleanup = await options.onSuccess();\n              } else {\n                onSuccessProcess = execa(options.onSuccess, {\n                  shell: true,\n                  stdio: 'inherit',\n                });\n                onSuccessProcess.on('exit', (code) => {\n                  if (code && code !== 0) {\n                    process.exitCode = code;\n                  }\n                });\n              }\n            }\n          };\n\n          await buildAll();\n        }\n      };\n\n      await Promise.all([dtsTask(), mainTasks()]);\n    }),\n  );\n}\n")),(0,i.kt)("p",null,"\u5176\u4e2d\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"mainTask"),"\u7528\u4e8e\u6267\u884c\u6784\u5efa\u7684\u903b\u8f91\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"dtsTask"),"\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"Web Worker"),"\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\uff0c\u501f\u52a9",(0,i.kt)("inlineCode",{parentName:"p"},"rollup"),"\uff0c\u6839\u636e",(0,i.kt)("inlineCode",{parentName:"p"},"CLI"),"\u7684\u9009\u9879\uff0c\u5224\u65ad\u662f\u5426\u4ea7\u51fa dts\u3002"),(0,i.kt)("p",null,"\u5165\u53e3\u6587\u4ef6\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"runEsbuild"),"\u4e2d\u4f5c\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"entry"),"\u4f20\u5165\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export async function runEsbuild(\n  options: NormalizedOptions,\n  { format, css, logger, buildDependencies, pluginContainer },\n) {\n  try {\n    result = await esbuild({\n      entryPoints: options.entry,\n    });\n  } catch (error) {\n    logger.error(format, 'Build failed');\n    throw error;\n  }\n}\n")))}u.isMDXComponent=!0}}]);